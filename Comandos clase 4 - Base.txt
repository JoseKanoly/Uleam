Comandos Para crear el proyecto //// Ejecutar Proyecto npm run dev
npm init --y 

Instalar TypeScript y demás dependencias
npm i -D typescript @types/node ts-node-dev rimraf

//crear carpetas src y dist//

Inicializar el archivo de configuración de TypeScript
npx tsc --init --outDir dist/ --rootDir src

Package.json
Crear scripts para dev, build y start
    "dev": "tsnd --respawn --clear src/app.ts", 
    "build": "rimraf ./dist && tsc", 
    "start": "npm run build && node dist/app.js"


Prisma - Practica

1 - Crear un proyecto
npx tsc --init (borrar el anterior)
npm install prisma --save-dev
npx prisma init --datasource-provider sqlite


2 - Modela tus datos 
//schema.prisma (crear el codigo guia como este)

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

3 - Ejecute una migración 
npx prisma migrate dev --name init

4 - Explora cómo enviar consultas
touch script.ts = app.ts (abrir y pegar)
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... you will write your Prisma Client queries here
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })
 
4.1. Crear un nuevo registroUser
Comencemos con una pequeña consulta para crear un nuevo registro en la base de datos y registrar el objeto resultante en la consola. Agregue el siguiente código a su archivo:Userscript.ts

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  const user = await prisma.user.create({
    data: {
      name: 'Alice',
      email: 'alice@prisma.io',
    },
  })
  console.log(user)
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })



4.3. Explorar consultas de relación con Prisma Client

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  const user = await prisma.user.create({
    data: {
      name: 'Bob',
      email: 'bob@prisma.io',
      posts: {
        create: [
          {
            title: 'Hello World',
            published: true
          },
          {
            title: 'My second post',
            content: 'This is still a draft'
          }
        ],
      },
    },
  })
  console.log(user)
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })

5. Pasos siguientes



Ejecutar
npx ts-node src/app.ts







import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  const user = await prisma.user.create({
    data: {
      name: 'Alice',
      email: 'alice@prisma.io',
    },
  })
  console.log(user)
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })
